plugins {
  id "com.github.spotbugs" version "1.6.0"
  id "com.jfrog.bintray" version "1.8.0"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'com.github.spotbugs'

sourceCompatibility = 8
targetCompatibility = 8

group = 'com.dua3.utility'
def ver = '0.11.1'

bintray {
    user = findProperty('BINTRAY_USER') ?: 'NONE'
    key = findProperty('BINTRAY_KEY') ?: 'NONE'

    println("**bintray**")
    println("user: "+user)
    
    configurations = ['archives']

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = false //[Default: false] Whether version should be auto published after an upload    
    override = false //[Default: false] Whether to override version artifacts already published    

    pkg {
        repo = 'public'
        name = 'com.dua3.utility'
        userOrg = findProperty('BINTRAY_USER_ORG') ?: 'NONE'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://gitlab.com/com.dua3.public/utility.git'

	    version {
	        name = ver
	        desc = 'utility '+ver
	        released  = new Date()
	        vcsTag = ver
	    }
    }
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
  testRuntime group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'

  // Use JUnit test framework
  testImplementation 'junit:junit:4.12'
}

/*
 * --- Jigsaw --- 
 */
 
def jigsaw = JavaVersion.current().isJava9Compatible()

if (jigsaw) {
    println("Creating a module-info")
    
    ext.moduleName = 'com.dua3.utility' 
    
    sourceSets {
        moduleInfo {
            java {
                srcDir 'src/module-info/java'            
            }
        }
    }
    
    compileModuleInfoJava {
        sourceCompatibility = 9
        targetCompatibility = 9
    
        inputs.property("moduleName", moduleName)
    
        doFirst {
            classpath += sourceSets.main.compileClasspath
            
            options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-SYSTEM',
                '-d', sourceSets.main.output.classesDirs.asPath
            ]
        }
    }
    
    jar 
    {
        from sourceSets.main.output
        from sourceSets.moduleInfo.output
    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id "xzel23"
            name "Axel Howind"
            email "axel@dua3.com"
        }
    }
    
    scm {
       url 'https://gitlab.com/com.dua3.public/utility.git'
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        UtilityPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.dua3.utility'
            artifactId 'utility'
            version ver
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'utilites and helper classes')
                root.appendNode('name', 'com.dua3.utility')
                root.appendNode('url', 'https://gitlab.com/com.dua3.public/utility')
                root.children().last() + pomConfig
            }
        }
    }
}

spotbugs {
    sourceSets = [sourceSets.main]
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
	archives jar
    archives sourcesJar
    archives javadocJar
}

defaultTasks 'build', 'publishToMavenLocal', 'install'
