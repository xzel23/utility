// Copyright (c) 2019 Axel Howind
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

plugins {
    id 'com.adarshr.test-logger' version '2.1.0' apply false
    id 'com.github.spotbugs' version '4.6.2' apply false
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.adarshr.test-logger'

    /////////////////////////////////////////////////////////////////////////////
    group = 'com.dua3.utility'
    version = '9-beta1'

    ext.moduleName = project.group
    ext.scm = 'https://gitlab.com/com.dua3/lib/utility.git'
    ext.repo = 'public'
    ext.description = 'Java utilities'

    ext.developerId = 'axh'
    ext.developerName = 'Axel Howind'
    ext.developerEmail = 'axel@dua3.com'
    /////////////////////////////////////////////////////////////////////////////

    ext {
        java_version = '11'
        junit_version = '5.5.1'
    }

    sourceCompatibility = java_version
    targetCompatibility = java_version

    repositories {
        // Maven Central Repository
        mavenCentral()
        
        // GitLab Packages
        maven {
            url "https://gitlab.com/api/v4/projects/24900343/packages/maven"
            name "GitLab"
            credentials(HttpHeaderCredentials) {
                name = 'Private-Token'
                value = gitLabPrivateToken
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }

    // dependencies
    dependencies {
        // JUnit
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    }

    test {
        useJUnitPlatform()
    }

    testlogger {
        theme 'standard-parallel'
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    // === ARTIFACTS === >

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    // === MAVEN publication === >

    // Create the pom configuration:
    def pomConfig = {
        licenses {
            license {
                name "MIT"
                url "https://opensource.org/licenses/MIT"
            }
        }
        developers {
            developer {
                id project.developerId
                name project.developerName
                email project.developerEmail
            }
        }

        scm {
            url project.scm
        }
    }

    // Create the publication with the pom configuration:
    publishing {
        publications {
            projectPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId project.group
                artifactId project.name
                version version
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', project.description)
                    root.appendNode('name', project.group)
                    root.appendNode('url', project.scm)
                    root.children().last() + pomConfig
                }
            }
        }

        repositories {
            maven {
                url "https://gitlab.com/api/v4/projects/24900343/packages/maven"
                credentials(HttpHeaderCredentials) {
                    name = "Private-Token"
                    value = gitLabPrivateToken // the variable resides in ~/.gradle/gradle.properties
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
    }

    // === SPOTBUGS === >
    spotbugs.toolVersion = '4.2.2'
    spotbugs.excludeFilter = rootProject.file('spotbugs-exclude.xml')

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }

}

// === DEFAULT TASKS === >
tasks.withType(PublishToMavenRepository) {
    dependsOn publishToMavenLocal
}

defaultTasks 'build', 'publishToMavenLocal'
