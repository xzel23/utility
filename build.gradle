plugins {
  id "com.github.spotbugs" version "1.6.0"
  id 'org.gradle.java.experimental-jigsaw' version '0.1.1'
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'com.github.spotbugs'
apply plugin: 'jacoco'
apply plugin: 'eclipse'

import org.gradle.plugins.ide.eclipse.model.AccessRule
eclipse {
    classpath {
        file {
            whenMerged {
                // make JavaFX classes accessible in eclipse
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javafx/**'))
                // use modules
                entries.findAll { isModule(it) }.each { it.entryAttributes['module'] = 'true' }
            }
        }
    }
}

boolean isModule(entry) {
    // filter java 9 modules
    entry.kind == 'lib'  // Only libraries can be modules
}

sourceCompatibility = 9
targetCompatibility = 9
javaModule.name = 'com.dua3.utility'

group = 'com.dua3.utility'

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
  compile     group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
  testRuntime group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'

  // Use JUnit test framework
  testImplementation 'junit:junit:4.12'
}

tasks.withType(AbstractCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
  options.compilerArgs += ["--add-modules", "javafx.controls"]
  options.compilerArgs += ["--add-modules", "javafx.web"]
}

tasks.withType(Test) {
  jvmArgs += ["--add-modules", "javafx.controls"]
  jvmArgs += ["--add-modules", "javafx.web"]
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(JacocoReport) {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
// fails with jigsaw:    archives javadocJar
}

defaultTasks 'build', 'publishToMavenLocal', 'install'
