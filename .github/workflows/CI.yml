name: CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-analyze:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Cache JDKs'
        if: runner.os == 'Linux'
        id: cache-jdks
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.os == 'Linux' && '/usr/lib/jvm/bellsoft-java21-full-amd64' || 'C:\Program Files\BellSoft\LibericaJDK-21' }}
            ${{ runner.os == 'Linux' && '/usr/lib/jvm/bellsoft-java24-full-amd64' || 'C:\Program Files\BellSoft\LibericaJDK-24' }}
          key: ${{ runner.os }}-liberica-jdk-21-24-${{ hashFiles('.github/workflows/CI.yml') }}

      - name: 'Set up BellSoft Liberica Full JDK 21 and BellSoft Liberica 24 on Linux'
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget

          # install Liberica 21 for compilation of the base sources
          wget https://download.bell-sw.com/java/21.0.7+9/bellsoft-jdk21.0.7+9-linux-amd64-full.deb
          sudo apt-get install -y ./bellsoft-jdk21.0.7+9-linux-amd64-full.deb
          
          # set Liberica 21 as the standard compiler
          sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/bellsoft-java21-full-amd64/bin/java 1
          sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/bellsoft-java21-full-amd64/bin/javac 1
          echo "JAVA_HOME=/usr/lib/jvm/bellsoft-java21-full-amd64" >> $GITHUB_ENV
          echo "/usr/lib/jvm/bellsoft-java21-full-amd64/bin:/usr/lib/jvm/bellsoft-java24-amd64/bin" >> $GITHUB_PATH

      - name: 'Set up BellSoft Liberica Full JDK 21 and BellSoft Liberica 24 on Windows'
        if: runner.os == 'Windows'
        run: |
          $jdkPath = 'C:\Program Files\BellSoft\LibericaJDK-21'
          Invoke-WebRequest -Uri "https://download.bell-sw.com/java/21.0.7+9/bellsoft-jdk21.0.7+9-windows-amd64-full.zip" -OutFile "bellsoft-jdk-21-windows-amd64-full.zip"
          Expand-Archive -Path "bellsoft-jdk-21-windows-amd64-full.zip" -DestinationPath $jdkPath
          
          $extractedFolder = Get-ChildItem -Path $jdkPath -Directory | Select-Object -First 1
          Get-ChildItem -Path (Join-Path -Path $extractedFolder.FullName -ChildPath "*") | Move-Item -Destination $jdkPath
          Remove-Item -Recurse -Force $extractedFolder.FullName
          
          # Update JAVA_HOME and PATH
          echo "JAVA_HOME=$jdkPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$jdkPath\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 'Cache Maven packages'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v3

      - name: 'Execute Gradle build'
        run: ./gradlew build jacocoTestReport
        id: compile
        continue-on-error: false

      - name: 'Upload test artifacts from all modules'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.os }}
          path: |
            **/build/test-artifacts/**
          if-no-files-found: ignore

      - name: 'Create Qodana config'
        if: runner.os == 'Linux'
        run: |
          cat > qodana.yaml << 'EOF'
          version: "1.0"
          linter: jetbrains/qodana-jvm-community:2025.1
          profile:
            name: qodana.starter
          exclude:
            - name: All
              paths:
                - "**/jmh/**"
          EOF

      - name: 'Qodana Scan'
        if: runner.os == 'Linux'
        uses: JetBrains/qodana-action@v2025.1
        with:
          args: --property,idea.kotlin.plugin.use.k2=false
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

      - name: 'Cache SonarCloud packages'
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: 'Sonar Scan'
        if: runner.os == 'Linux'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          ./gradlew sonar
          -Dsonar.projectKey=xzel23_utility
          -Dsonar.organization=xzel23
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.coverage.jacoco.xmlReportPaths=**/build/reports/jacoco/test/jacocoTestReport.xml

